diff --git a/config.def.h b/config.def.h
index 79b3e8d..1ac90fe 100644
--- a/config.def.h
+++ b/config.def.h
@@ -2,25 +2,30 @@
 
 /* appearance */
 static const char *fonts[] = {
-	"monospace:size=10"
+    "Terminus:size=9",
+    "xbmicons:size=9"
 };
-static const char dmenufont[]       = "monospace:size=10";
-static const char normbordercolor[] = "#444444";
-static const char normbgcolor[]     = "#222222";
-static const char normfgcolor[]     = "#bbbbbb";
-static const char selbordercolor[]  = "#005577";
-static const char selbgcolor[]      = "#005577";
-static const char selfgcolor[]      = "#eeeeee";
-#define NUMCOLORS         4
+static const char dmenufont[] = "Terminus:size=9";
+#define NUMCOLORS 12
 static const char colors[NUMCOLORS][MAXCOLORS][8] = {
-  // border   foreground background
-  { "#000033", "#dddddd", "#000033" },  // normal
-  { "#000088", "#ffffff", "#000088" },  // selected
-  { "#ff0000", "#000000", "#ffff00" },  // urgent/warning  (black on yellow)
-  { "#ff0000", "#ffffff", "#ff0000" },  // error (white on red)
-  // add more here
+  // border foreground background
+  /* { "#282a2e", "#373b41", "#1d1f21" }, // 1 = normal (grey on black) */
+  /* { "#f0c674", "#c5c8c6", "#1d1f21" }, // 2 = selected (white on black) */
+  /* { "#dc322f", "#1d1f21", "#f0c674" }, // 3 = urgent (black on yellow) */
+  { "#444444", "#bbbbbb", "#282a2e" }, // 1 = normal
+  { "#990000", "#eeeeee", "#990000" }, // 2 = selected
+  { "#ffffff", "#000000", "#ffffff" }, // 3 = urgent
+  { "#282a2e", "#bbbbbb", "#282a2e" }, // 4 = grey
+  { "#282a2e", "#1d1f21", "#282a2e" }, // 5 = black
+  { "#282a2e", "#cc6666", "#282a2e" }, // 6 = red
+  { "#282a2e", "#b5bd68", "#282a2e" }, // 7 = green
+  { "#282a2e", "#de935f", "#282a2e" }, // 8 = orange
+  { "#282a2e", "#f0c674", "#282a2e" }, // 9 = yellow
+  { "#282a2e", "#81a2be", "#282a2e" }, // A = blue
+  { "#282a2e", "#b294bb", "#282a2e" }, // B = magenta
+  { "#282a2e", "#8abeb7", "#282a2e" }, // C = cyan
 };
-static const unsigned int borderpx  = 1;        /* border pixel of windows */
+static const unsigned int borderpx  = 2;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const unsigned int systraypinning = 0;   /* 0: sloppy systray follows selected monitor, >0: pin systray to monitor X */
 static const unsigned int systrayspacing = 2;   /* systray spacing */
@@ -29,6 +34,9 @@ static const int showsystray        = 1;        /* 0 means no systray */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
 
+/* patches */
+#include "push.c"
+
 /* tagging */
 static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
 
@@ -38,14 +46,16 @@ static const Rule rules[] = {
 	 *	WM_NAME(STRING) = title
 	 */
 	/* class      instance    title       tags mask     isfloating   monitor */
-	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
+	/* { "Gimp",     NULL,       NULL,       0,            1,           -1 }, */
+	/* { "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 }, */
+    { "Qalculate-gtk", NULL,  NULL,       0,            True,        -1 },
+    { NULL,       NULL,       "PGPLOT Server", 0,       True,        -1 },
 };
 
 /* layout(s) */
-static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
+static const float mfact     = 0.50; /* factor of master area size [0.05..0.95] */
 static const int nmaster     = 1;    /* number of clients in master area */
-static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
+static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */
 
 static const Layout layouts[] = {
 	/* symbol     arrange function */
@@ -55,46 +65,125 @@ static const Layout layouts[] = {
 };
 
 /* key definitions */
-#define MODKEY Mod1Mask
+#define MODKEY Mod4Mask
+#define ALTKEY Mod1Mask
 #define TAGKEYS(KEY,TAG) \
 	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
 	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
 	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
 	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
+#include <X11/XF86keysym.h>
 
 /* helper for spawning shell commands in the pre dwm-5.0 fashion */
 #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
 
 /* commands */
 static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
-static const char *termcmd[]  = { "st", NULL };
+static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", "#222222", "-nf", "#bbbbbb", "-sb", "#990000", "-sf", "#eeeeee", NULL };
+
+static const char *termcmd[]  = { "st", "-e", "tmux", NULL };
+static const char *ncmpcpp[]  = { "st", "-e", "ncmpcpp", NULL };
+static const char *htop[]     = { "st", "-e", "htop", NULL };
+static const char *glances[]  = { "st", "-e", "glances", NULL };
+
+static const char *scrot[]    = { "scrot", NULL };
+static const char *scrot_i[]    = { "scrot", "-s", NULL };
+static const char *xscreensaver_lock[] = { "xscreensaver-command", "-lock", NULL };
+
+static const char *emacs[]       = { "st", "-e", "emacsclient", "-c", "-a=", NULL };
+static const char *spacefm[]     = { "spacefm", NULL };
+static const char *firefox[]     = { "firefox", NULL };
+static const char *pavucontrol[] = { "pavucontrol", NULL };
+static const char *qalculate[] = { "qalculate-gtk", NULL };
+
+static const char *pulseaudio_ctl_up[]   = { "pulseaudio-ctl", "up", NULL };
+static const char *pulseaudio_ctl_down[] = { "pulseaudio-ctl", "down", NULL };
+static const char *pulseaudio_ctl_mute[] = { "pulseaudio-ctl", "mute", NULL };
+static const char *pulseaudio_ctl_mic_mute[] = { "pulseaudio-ctl", "mute-input", NULL };
+
+static const char *mpc_toggle[]   = { "mpc", "toggle", NULL };
+static const char *mpc_prev[]     = { "mpc", "prev", NULL };
+static const char *mpc_next[]     = { "mpc", "next", NULL };
+static const char *mpc_seek_for[] = { "mpc", "seek", "+", NULL };
+static const char *mpc_seek_bac[] = { "mpc", "seek", "-", NULL };
+static const char *mpc_vol_up[]   = { "mpc", "volume", "+2", NULL };
+static const char *mpc_vol_dn[]   = { "mpc", "volume", "-2", NULL };
 
 static Key keys[] = {
 	/* modifier                     key        function        argument */
-	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
+	/* programs */
+	{ MODKEY,                       XK_e,      spawn,          {.v = emacs } },
+	{ MODKEY,                       XK_w,      spawn,          {.v = spacefm } },
+	{ MODKEY,                       XK_p,      spawn,          {.v = pavucontrol } },
+	{ MODKEY,                       XK_q,      spawn,          {.v = qalculate } },
+
+	{ MODKEY,                       XK_F12,    spawn,          {.v = xscreensaver_lock } },
+	{ 0,                            XK_Print,  spawn,          {.v = scrot } },
+	{ ALTKEY,                       XK_Print,  spawn,          {.v = scrot_i } },
+	{ MODKEY,                       XK_n,      spawn,          {.v = ncmpcpp } },
+	{ MODKEY,                       XK_b,      spawn,          {.v = glances } },
+
+    /* greysky's "pulseaudio-ctl" */
+	{ 0,                            XF86XK_AudioRaiseVolume, spawn, {.v = pulseaudio_ctl_up } },
+	{ 0,                            XF86XK_AudioLowerVolume, spawn, {.v = pulseaudio_ctl_down } },
+	{ 0,                            XF86XK_AudioMute,        spawn, {.v = pulseaudio_ctl_mute } },
+	{ 0,                            XF86XK_AudioMicMute,     spawn, {.v = pulseaudio_ctl_mic_mute } },
+
+	/* mpd controls */
+	{ MODKEY|ALTKEY,                XK_Down,   spawn,          {.v = mpc_toggle } },
+	{ MODKEY|ALTKEY,                XK_Left,   spawn,          {.v = mpc_prev } },
+	{ MODKEY|ALTKEY,                XK_Right,  spawn,          {.v = mpc_next } },
+	{ MODKEY|ALTKEY|ControlMask,    XK_Left,   spawn,          {.v = mpc_seek_for } },
+	{ MODKEY|ALTKEY|ControlMask,    XK_Right,  spawn,          {.v = mpc_seek_bac } },
+    { MODKEY|ALTKEY,                XK_equal,  spawn,          {.v = mpc_vol_up } },
+    { MODKEY|ALTKEY,                XK_minus,  spawn,          {.v = mpc_vol_dn } },
+
+	/* wm commands */
+	{ MODKEY,                       XK_r,      spawn,          {.v = dmenucmd } },
 	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
-	{ MODKEY,                       XK_b,      togglebar,      {0} },
+	/* { MODKEY,                       XK_b,      togglebar,      {0} }, */
 	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
 	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
+	{ MODKEY|ShiftMask,             XK_j,      pushdown,       {0} },
+	{ MODKEY|ShiftMask,             XK_k,      pushup,         {0} },
 	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
 	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
 	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
 	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
+	{ MODKEY|ShiftMask,             XK_h,      setmfact,       {.f = -0.01} },
+	{ MODKEY|ShiftMask,             XK_l,      setmfact,       {.f = +0.01} },
 	{ MODKEY,                       XK_Return, zoom,           {0} },
-	{ MODKEY,                       XK_Tab,    view,           {0} },
+
+	/* { MODKEY,                       XK_Tab,    view,           {0} }, */
+	{ MODKEY,                       XK_Tab,    focusmon,       {.i = +1 } },
+	{ MODKEY|ShiftMask,             XK_Tab,    focusmon,       {.i = -1 } },
+	{ MODKEY,                       XK_bracketleft,  tagmon,   {.i = -1 } },
+	{ MODKEY,                       XK_bracketleft,  focusmon, {.i = -1 } },
+	{ MODKEY,                       XK_bracketright, tagmon,   {.i = +1 } },
+	{ MODKEY,                       XK_bracketright, focusmon, {.i = +1 } },
 	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
+
 	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
 	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
 	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
 	{ MODKEY,                       XK_space,  setlayout,      {0} },
+    { MODKEY,                       XK_v,      togglefullscreen, {0} },
 	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
 	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
 	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
-	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
-	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
-	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
-	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
+
+	{ MODKEY,                       XK_comma,  cycle,          {.i = -1 } },
+	{ MODKEY,                       XK_period, cycle,          {.i = +1 } },
+	{ MODKEY,                       XK_Left,   cycle,          {.i = -1 } },
+	{ MODKEY,                       XK_Right,  cycle,          {.i = +1 } },
+	{ 0,                            XF86XK_Back, cycle,        {.i = -1 } },
+	{ 0,                            XF86XK_Forward, cycle,     {.i = +1 } },
+
+	{ MODKEY|ShiftMask,             XK_comma,  tagcycle,       {.i = -1 } },
+	{ MODKEY|ShiftMask,             XK_period, tagcycle,       {.i = +1 } },
+	{ MODKEY|ShiftMask,             XK_Left,   tagcycle,       {.i = -1 } },
+	{ MODKEY|ShiftMask,             XK_Right,  tagcycle,       {.i = +1 } },
+
 	TAGKEYS(                        XK_1,                      0)
 	TAGKEYS(                        XK_2,                      1)
 	TAGKEYS(                        XK_3,                      2)
@@ -104,7 +191,7 @@ static Key keys[] = {
 	TAGKEYS(                        XK_7,                      6)
 	TAGKEYS(                        XK_8,                      7)
 	TAGKEYS(                        XK_9,                      8)
-	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
+	/* { MODKEY|ShiftMask,             XK_q,      quit,           {0} }, */
 };
 
 /* button definitions */
diff --git a/dwm.c b/dwm.c
index 83f09ce..34ac05b 100644
--- a/dwm.c
+++ b/dwm.c
@@ -51,7 +51,7 @@
                                * MAX(0, MIN((y)+(h),(m)->wy+(m)->wh) - MAX((y),(m)->wy)))
 #define ISVISIBLE(C)            ((C->tags & C->mon->tagset[C->mon->seltags]))
 #define LENGTH(X)               (sizeof X / sizeof X[0])
-#define MAXCOLORS               9
+#define MAXCOLORS               12
 #define MOUSEMASK               (BUTTONMASK|PointerMotionMask)
 #define WIDTH(X)                ((X)->w + 2 * (X)->bw)
 #define HEIGHT(X)               ((X)->h + 2 * (X)->bw)
@@ -247,6 +247,7 @@ static void tagmon(const Arg *arg);
 static void tile(Monitor *);
 static void togglebar(const Arg *arg);
 static void togglefloating(const Arg *arg);
+static void togglefullscreen(const Arg *arg);
 static void toggletag(const Arg *arg);
 static void toggleview(const Arg *arg);
 static void unfocus(Client *c, int setfocus);
@@ -2020,6 +2021,16 @@ togglefloating(const Arg *arg)
 }
 
 void
+togglefullscreen(const Arg *arg) {
+    if(!selmon->sel)
+        return;
+    if(selmon->sel->isfullscreen)
+        setfullscreen(selmon->sel, False);
+    else
+        setfullscreen(selmon->sel, True);
+}
+
+void
 toggletag(const Arg *arg)
 {
 	unsigned int newtags;
